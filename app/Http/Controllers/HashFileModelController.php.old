<?php

namespace App\Http\Controllers;

use App\Models\Hash_File_Model;
use Illuminate\Http\Request;

use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Hash;
use Illuminate\Http\Response;

use App\Models\Client_information;



class HashFileModelController extends Controller
{
    public function bash(Request $request) {
        //return Response::json(['response'=> $request]);
        //return redirect()->response()->js
        return response()->json(['success' => 'la fichier est ajouter avec succces.']);

    }
    public function index()
    {
        //
        //recuperie tous les données de la base de donnée que se trouve dans la table 
        //$data = Hash_File_Model::all();
        //return view('accueil', ['table_fichier_hash' => $data]);

        $data = Hash_File_Model::all();
        
        $info_client = Client_information::all();
        return view('accueil', ['information_client' => $info_client, 'table_fichier_hash' => $data]);

        //boucle infini pour tester les hashe de fichier
        //$data = Hash_File_Model::select('nom_de_fichier')->get();
        //dd($data);

    }

    // fonction pour afficher tous les données de la base de données 
    public function api_datashow(){
        $data = Hash_File_Model::all();
        //return response()->json($data);

        return response()->json([
            'fichiers_hash' => $data
        ], Response::HTTP_OK);
    }
   



    public function select_file( Request $folder ){
        
        $dir = '/mnt';
        $pathinfo = '';

        $test = '';

      
        if(isset($_GET['file'])){            
            $dir = $dir.$_GET['file'];
        }

        function iter_file($dir){
            $root = scandir($dir);
            $result = [];

            if(isset($_GET['file'])){ $dir = $dir.$_GET['file']; }                
            
            foreach($root as $value) {
                // par default le scandir affiche le lien vers ces dossier (. et .. ), alors dans cette condition on le dire de ne pas afficher ces dossier.
                if($value === '.' || $value === '..') { continue; }

                //dd($value);
                $result[]=$value;
            }    
            return $result;
        }

        //$res = iter_file($dir);

       
        function it($dir){
            $result = [];
           
            if (is_dir($dir)) {
                if ($dh = opendir($dir)) {
                    while (($file = readdir($dh)) !== false) {
                        if($file === '.' || $file === '..') { continue; }

                        if(filetype($dir.'/'.$file) === 'file'){
                            //$result[] = $file;
                            //array_push($result, $file);
                            //array_push($result, $dir);
                            array_push($result, [ 'name' => $file, 'path' => $dir, 'filetype' => 'file']);

                            return $result;
                            //dd($result);
                            /*
                            $html = '<div class="col-sm-2">
                                        <div class="card-body">
                                            <form action="select_file" method="POST">
                                                <input type="hidden" name="chemni_de_fichier" value="'.$dir.'">
                                                <input type="hidden" name="nom_de_fichier" value="'.$file.'">
                                                <a class="submit" href="select_file"><i class="fa fa-folder-o fa-5x" aria-hidden="true"></i></a>
                                                <p class="card-text">'.$file.'</p>
                                            </form>
                                        </div>
                                    </div>';
                            echo $html;
                            */
                        }
                        if(filetype($dir.'/'.$file) !== 'file')
                            array_push($result, [ 'name' => $file, 'path' => $dir, 'filetype' => 'dir']);
                            //$result[]=$file;

                        //echo "fichier : $file : type : " . filetype($dir .'/'. $file) . "\n";
                    }
                    closedir($dh);
                }
                return $result;
            }
        }



        //dd(it($dir));
        

        
        function est_fichier($dir){
            if(filetype($dir) !== 'file'){
                return false;
            }else{
                return true;
            }
        }
        //dd(est_fichier('/mnt/partage1/Drive_client/appat.txt'));

        //dd(est_fichier($dir.'/'.it($dir)[0]));


       //dd(is_dir('/mnt/partage1/'));
        
        //dd(file_exists('/mnt/partage1/'));



        $res = it($dir);
        //dd($res[0]);
      
        return view('pages.ajouter_fichier_appat', ['files' => $res]);

        

        //return view('pages.select_path', ['files' => $root]);
        //return $folder;
    }




     //Retourner un affichage avec form
     //The create method should return a view with a form.
    public function create()
    {
        //
    }


    public function store_laravel(Request $request){
 
        //validation de données avant le sauvgarder.
        request()->validate([
            'chemin' => 'required',
            'fichier' => 'required',
        ]);

        // GET les information des input
        $file = $request->file('fichier');
        $contents = $file->get('originalName');
        $hash = md5($contents);
        $file_name = $request->fichier->getClientOriginalName();

        //saugrader les données dans le sqlite3
        Hash_File_Model::create([
            'nom_de_fichier' => $file_name,
            'Chemin_de_fichier' => request('chemin'),
            'Hash_de_fichier' => $hash,
        ]);
        
        return redirect('/');       //retourber vers la page de index.

        //script pour valider la hash de fichier appat tous les 3 Min.
    }


    // sauvgarder les donées de la formulaire ajouter un nouveau fichier .
    public function store(Request $request){
        if ($request->hasFile('file')){
            $file = $request->file('file');         // fichier qui est envoyé par client.
            $file_name = $file->getClientOriginalName();    //le nom original de la fichier
            $contents = $file->get('originalName');     //contenu de fichier.
            $hash = md5($contents);     //changer le contenu de fichier en format hash, j'ai utilisé 
            $path = $request->path;     // recuperier à partir de données d'input chemin_de_fichier
        }

        dd($request->chemin_de_fichier);

        Hash_File_Model::create([
            'nom_de_fichier' => $file_name,
            'Chemin_de_fichier' => $path,
            'Hash_de_fichier' => $hash,
        ]);
        
        return response()->json(['success' => 'la fichier est ajouter avec succces.']);
    }

/*
    //The store method should handle the form and create the entity and redirect.
    public function store(Request $request) {
        //validation de données avant le sauvgarder.
        request()->validate([
            'chemin' => 'required',
            'fichier' => 'required',
        ]);
  
        $file = $request->file('fichier');                              // variable pour recuperer  le fichier telecharger(upload) par utilisateur
        $contents = $file->get('originalName');                         // variable pour recuperer les contenu de fichier upload par utilisateur
        $hash = md5($contents);                                         // variable qui va contenir le hash du fichier 
        $file_name = $request->fichier->getClientOriginalName();        //variable pour recuperer  le nom original de fichier

        //saugrader les données dans le sqlite3
        Hash_File_Model::create([
            'nom_de_fichier' => $file_name,
            'Chemin_de_fichier' => request('chemin'),
            'Hash_de_fichier' => $hash,
        ]);
        
        //retourber vers la page de index.
        return redirect('/');

        //script pour valider la hash de fichier appat tous les 3 Min.
    }
*/


    public function store_test(Request $request) {
        //dd(scandir('/mnt/partage1/Drive_client'));
        $directory = '/mnt';
        $scanned_directory = array_diff(scandir($directory), array('..', '.'));

        
        /*
        function dirToArray($dir) {
  
            $result = array();
         
            $cdir = scandir($dir);
            foreach ($cdir as $key => $value)
            {
               if (!in_array($value,array(".","..")))
               {
                  if (is_dir($dir . DIRECTORY_SEPARATOR . $value))
                  {
                     $result[$value] = dirToArray($dir . DIRECTORY_SEPARATOR . $value);
                  }
                  else
                  {
                     $result[] = $value;
                  }
               }
            }
           
            return $result;
         } 
         */

         // ça march un peu
         /*
        function find_all_files($dir) {

            if(!is_dir($dir)) return false;

            $pathinfo = '';
            $root = scandir($dir);
            $result = [];

            foreach($root as $value) {
                if($value === '.' || $value === '..') { continue; }

                if(is_file("$dir/$value")) {
                    $pathinfo = pathinfo($dir.'/'.$value);
                    
                    //dd($pathinfo);
    
                    //verification de l'extension de fichier
                    
                    //if($pathinfo['extension'] == 'txt') {
                    //    $result[]="$dir/$value";        
                    //}
                    
                    //continue;

                    if($pathinfo) {
                        $result[]="$dir/$value";        
                    }
                    continue;
                }

                foreach(find_all_files("$dir/$value") as $value) {
                    $result[]=$value;
                }
            }

            return $result;
        }
        */

        function iter_file($dir){
            $pathinfo = '';
            $root = scandir($dir);
            $result = [];
            
            foreach($root as $value) {
                if($value === '.' || $value === '..') { continue; }

                if(is_file("$dir/$value")) {
                    $pathinfo = pathinfo($dir.'/'.$value);
                    if($pathinfo) {
                        $result[]="$dir/$value";        
                    }
                    continue;
                }

                foreach(iter_file("$dir/$value") as $value) {
                    $result[]=$value;
                }
            }
            return $result;
        }


        //call function
        //$res = iter_file('/mnt');
        //dd($res);


        //dd(glob($directory."/*"));
        $dir = '/mnt/partage1';
        $root = scandir($dir);

        return redirect('ajouter_fichier_appat', ['dir'=> $dir, 'scan' => $root]);

        /*
        foreach ($res as $ligne ){
            $html = "<a href='#'>".$ligne."</a><br>";
            echo $html;
        }
        */

        //dd($html);


        //dd(dirToArray($directory));

    }

    //fonction pour checker les fichier
    public function check(Request $request) {
        //$names_string = $request->name;     //recevoir les noms de fichier dans le methode post, et le typed de données est string 
        //$names_array = explode(",",$names_string);    // changer le type de donner en format tableau.
        $paths_string = $request->path;     //lien de fichier en format de type 'string'. 
        $paths_array = explode(',', $paths_string);     // lien absolute de fichier en form array.

        $ids_string = $request->id;
        $ids_array = explode(',', $ids_string);
       
        $array_length = count($paths_array);        // nombre de fichier 
        $hash_result = [];      // variable pour sauvgarder temporairement le resultat de comparaison de hash. 


        
        /*
        $user = "projm1_21";
        $pass= "5IwEc39Y8h9T";

        exec('net use "\\\\192.168.176.2\projetm12021" /user:"'.$user .'" "'.$pass.'" /persistent:no');
        $dir = '\\192.168.176.2\projetm12021';
        $files = scandir($dir);
        dd($files);
        */



        
        // boucle for pour comparer tous les ligne de la tables.
        for ($index = 0; $index < $array_length; $index++) {
            $hash = md5_file($paths_array[$index]);         // hash de fichier sauvgarder.

            $row_database = Hash_File_Model::find($ids_array[$index]);      //variable pour trouver la ligne coresspondance 
            $hash_database = $row_database->Hash_de_fichier;            // trouver le hash de la ligne correspondace
            if ($hash != $hash_database){
                array_push($hash_result, "\r\n File name : ".$row_database->nom_de_fichier . " => Nouveau Hash :" .$hash);   
            }
        }
        return response()->json(['hash_result' => $hash_result]);
    }





    /**
     * Display the specified resource.
     *
     * @param  \App\Models\Hash_File_Model  $hash_File_Model
     * @return \Illuminate\Http\Response
     */
    public function show(Hash_File_Model $hash_File_Model)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Models\Hash_File_Model  $hash_File_Model
     * @return \Illuminate\Http\Response
     */
    //The edit method should return a view with a form with data from the entity.
    public function edit(Hash_File_Model $hash_File_Model)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\Hash_File_Model  $hash_File_Model
     * @return \Illuminate\Http\Response
     */
    //The update method should handle the form and update the entity and redirect.
    public function update(Request $request, Hash_File_Model $hash_File_Model)
    {
        //
    }

    //fonction pour supprimer un ligne de tableau afficher dans laravel
    public function destroy_laravel(Hash_File_Model $id) {
        $id->delete();
        return redirect('/');
    }

    // fonction pour supprimer pleusieur ligne, pure laravel (php)
    public function destroy_multiple_laravel(Request $request){

        //avant de supprimer on valide si utilisateur a bien selectioner la checkbox ou pas
        $request->validate([
            'checkbox' => 'required',
        ]);

        if(isset($_POST['delete']) && !empty($checkbox)){
            $checkbox = $_POST['checkbox'];
            $nb_delete_record = count($checkbox);
            
            for( $i=0; $i < $nb_delete_record; $i++ ){
                $del_id = $checkbox[$i];
                Hash_File_Model::where('id', $del_id)->delete();
            }
            return redirect('/');
        }
        //return response("vous n'avez pas selectionée aucune ligne pour supprimer ! <br> Pour aller à l'accueil cliquer <a href='/'> ici .</a>");
       // return redirect('/');
    }


    // fonction pour supprimer un ligne de tableau, requet recu de vue.js
    public function destroy(Hash_File_Model $id) {
        $id->delete();
        return response()->json(['response' => 'le ligne est supprimer avec success']);

    }

    //fonction pour supprimer plusieur record en meme temps
    public function destroy_multiple(Request $request){
        try {
            $ids = $request->id;        // variable pour recuperier les ID de checkbox.
            foreach ($ids as $id) {
                Hash_File_Model::where('id', $id)->delete();
            }
            return response()->json(['response' => 'les case à cocher sont supprimer avec success']);
        }
        catch (Exception $e) {
            return response()->json($e->getMessage(), 500);
        }
    }
}









    //fonction pour checker les fichier
    public function check(Request $request) {
        // validation de données est fait dans le fonction check_supprimer()

        $checkbox = $request->checkbox;     //

        if(isset($_POST['check']) && !empty($checkbox)){
            $nb_selected_record = count($checkbox);     // longueur de array ( nombre de checkbox selectionnées )
            $query = Hash_File_Model::whereIn('id', $checkbox)->get();      // GET all checked checkbox data from database
            $error = [];        // after use

            // boucle for pour comparer tous les ligne de la tables.
            for ($index = 0; $index < $nb_selected_record; $index++) {
                $name_stored = $query[$index]->nom_de_fichier;      // get file name from database
                $path_stored = $query[$index]->Chemin_de_fichier;   // get path from dataabse
                $hash_stored = $query[$index]->Hash_de_fichier;     // get Hash from database
                
                $file_path = $path_stored.'/'.$name_stored;
                $hash = md5_file($file_path);         // hash de fichier partagé.

                // mis à jour le column de dernier_check dans le base de données
               /* $client_information->update([
                    'nom_entreprise' =>  request('nom_entreprise'),
                    'site' =>  request('site'),
                    'nom_client' => request('nom_client'),
                    'mobile' => request('mobile'),
                    'email' => request('email'),
                ]);
*/
                /*
                if ($hash != $hash_stored){
                    array_push($error, "\r\n File name : ".$row_database->nom_de_fichier . " => Nouveau Hash :" .$hash);   
                }
                */
            }
            //return response()->json(['error' => $error]);
        }
        //return redirect('/');
    }



 public function store_laravel(Request $request){
 
        //validation de données avant le sauvgarder.
        request()->validate([
            'chemin' => 'required',
            'fichier' => 'required',
        ]);

        // GET les information des input
        $file = $request->file('fichier');
        $contents = $file->get('originalName');
        $hash = md5($contents);
        $file_name = $request->fichier->getClientOriginalName();

        //saugrader les données dans le sqlite3
        Hash_File_Model::create([
            'nom_de_fichier' => $file_name,
            'Chemin_de_fichier' => request('chemin'),
            'Hash_de_fichier' => $hash,
        ]);
        
        return redirect('/');       //retourber vers la page de index.

        //script pour valider la hash de fichier appat tous les 3 Min.
    }